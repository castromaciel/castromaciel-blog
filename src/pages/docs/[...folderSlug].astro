---
import type { GetStaticPathsItem } from "astro";
import { getCollection } from "astro:content";
import { z } from "zod";
import PostLink from '~/components/PostLink.astro';
import PagesLayout from '~/layouts/PagesLayout.astro';

const meta = {
  title: 'Docs - Castro Maciel',
  description: 'Here i&apos;ve wrote about me, it world and other interesting things..'
}

type FolderChild = { href: string; name: string; type: 'folder' | 'document' | 'back' }

export const folderMetaSchema = z.object({
  name: z.string(),
  lang: z.enum(['es', 'en']),
})

export type Props = z.infer<typeof folderMetaSchema> & { children: FolderChild[] }

interface PathItem extends GetStaticPathsItem {
  params: { folderSlug?: string }
  props: Props
}

export async function getStaticPaths() {
  const paths: PathItem[] = [
    {
      params: { folderSlug: undefined },
      props: { name: "~/docs", lang: "en", children: [] },
    },
  ]

  const addToParent = (slug: string, name: string, type: FolderChild["type"]) => {
    const parent = slug.split("/").slice(0, -1).join("/")
    const child: FolderChild = { href: `./${slug.split("/").at(-1)}/`, name, type }

    if (parent.length === 0) {
      const root = paths.find(path => path.params.folderSlug === undefined)!
      root.props.children.push(child)
    } else {
      for (const path of paths) {
        if (path.params.folderSlug !== parent) continue

        path.props.children.push(child)
        return
      }
      throw new Error(`Could not find parent for ${slug}`)
    }
  }

  const folders = import.meta.glob("../../content/docs/**/_meta.json")

  for (const path in folders) {
    const slug = path.slice(19, -11)
    const json = await folders[path]()
    const meta = folderMetaSchema.parse(json)
    paths.push({
      params: { folderSlug: slug },
      props: { name: `${meta.name} (~/docs)`, lang: meta.lang, children: [] },
    })

    addToParent(slug, meta.name, "folder")
  }

  const entries = await getCollection("docs")
  for (const entry of entries) {
    addToParent(entry.slug, entry.data.title, "document")
  }

  return paths
}

const { name, lang, children } = Astro.props

let entries = [...children]
entries = entries.sort((a, b) => {
  if (a.type === "folder" && b.type === "document") return -1
  if (a.type === "document" && b.type === "folder") return 1
  return a.name.localeCompare(b.name, lang)
})

if (Astro.params.folderSlug !== undefined) {
  entries = [...entries, { href: "../", name: "go back", type: "back" }]
}
---

<PagesLayout {...meta}>
  <section>

    <h1>Documents</h1>
    <p>Here i&apos;ve wrote about a bit of all. Like blog posts, design patterns, maths, notes of university, etc.. </p>
    <ul>
      {
        entries.map(({ type, href, name }) => (
          <PostLink url={href} title={name} type={type}/>
        ))
      }
      </ul>
    <hr>
  </section>
</PagesLayout>

<style lang="scss">
  ul {
    list-style-type: none;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
</style>
